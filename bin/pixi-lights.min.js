!function e(r,t,i){function n(a,l){if(!t[a]){if(!r[a]){var u="function"==typeof require&&require;if(!l&&u)return u(a,!0);if(o)return o(a,!0);var s=new Error("Cannot find module '"+a+"'");throw s.code="MODULE_NOT_FOUND",s}var f=t[a]={exports:{}};r[a][0].call(f.exports,function(e){var t=r[a][1][e];return n(t?t:e)},f,f.exports,e,r,t,i)}return t[a].exports}for(var o="function"==typeof require&&require,a=0;a<i.length;a++)n(i[a]);return n}({1:[function(e,r,t){r.exports=PIXI.lights={Light:e("./light_2/lights/Light"),LightShader:e("./light_2/lights/LightShader"),PointLight:e("./light_2/lights/point/PointLight"),PointLightShader:e("./light_2/lights/point/PointLightShader"),LightRenderer:e("./light_2/renderers/LightRenderer"),WebGLDeferredRenderer:e("./light_2/renderers/WebGLDeferredRenderer")},e("./light_2/lightSpriteMixin")},{"./light_2/lightSpriteMixin":2,"./light_2/lights/Light":3,"./light_2/lights/LightShader":4,"./light_2/lights/point/PointLight":5,"./light_2/lights/point/PointLightShader":6,"./light_2/renderers/LightRenderer":7,"./light_2/renderers/WebGLDeferredRenderer":8}],2:[function(e,r,t){PIXI.Sprite.prototype._renderWebGL=function(e){this._originalTexture||(this._originalTexture=this._texture),this._texture=e.renderingNormals&&this.normalTexture?this.normalTexture:this._originalTexture,e.setObjectRenderer(e.plugins.sprite),e.plugins.sprite.render(this)}},{}],3:[function(e,r,t){function i(e,r,t){if(this.constructor===i)throw new Error("Light is an abstract base and should not be created directly!");PIXI.DisplayObject.call(this),this.uvs=new Float32Array([0,0,1,0,1,1,0,1]),this.vertices=r||new Float32Array([0,0,1024,0,1024,512,0,512]),this.indices=new Uint16Array([0,1,2,0,2,3]),this.blendMode=PIXI.BLEND_MODES.NORMAL,this._vertexBuffer=null,this._indexBuffer=null,this._uvBuffer=null,this.needsUpdate=!0,this._color=16777215,this._colorRgba=[1,1,1,1],(e||0===e)&&(this.color=e),this.height=.075,this.falloff=[.4,7,40],this.shaderName=null}i.prototype=Object.create(PIXI.DisplayObject.prototype),i.prototype.constructor=i,r.exports=i,Object.defineProperties(i.prototype,{color:{get:function(){return this._color},set:function(e){this._color=e,PIXI.utils.hex2rgb(e,this._colorRgba)}}}),i.prototype.renderWebGL=function(e){e.renderingNormals&&e.plugins.lights.render(this)},i.prototype.destroy=function(){PIXI.DisplayObject.prototype.destroy.call(this)}},{}],4:[function(e,r,t){function i(e,r,t,n,o){var a={alpha:{type:"1f",value:0},translationMatrix:{type:"mat3",value:new Float32Array(9)},projectionMatrix:{type:"mat3",value:new Float32Array(9)},uSampler:{type:"sampler2D",value:null},uNormalSampler:{type:"sampler2D",value:null},uViewSize:{type:"2f",value:new Float32Array(2)},uAmbientColor:{type:"4f",value:new Float32Array(4)},uLightColor:{type:"4f",value:new Float32Array([1,1,1,1])},uLightFalloff:{type:"3f",value:new Float32Array([0,0,0])}};if(n)for(var l in n)a[l]=n[l];var u={aVertexPosition:0,aTextureCoord:0};if(o)for(var s in o)u[s]=o[s];PIXI.Shader.call(this,e,r||i.defaultVertexSrc,t||i.defaultFragmentSrc,a,u)}i.prototype=Object.create(PIXI.Shader.prototype),i.prototype.constructor=i,r.exports=i,i.defaultVertexSrc="#define GLSLIFY 1\n\nprecision lowp float;\r\n\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 translationMatrix;\r\nuniform mat3 projectionMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void) {\r\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n    vTextureCoord = aTextureCoord;\r\n}\r\n",i.defaultFragmentSrc="#define GLSLIFY 1\n\nprecision lowp float;\r\n\r\nvarying vec2 vTextureCoord;\r\n\nuniform sampler2D uSampler;\r\nuniform sampler2D uNormalSampler;\r\n\r\nuniform mat3 translationMatrix;\r\n\r\nuniform float alpha;\r\n\r\nuniform vec2 uViewSize;\r\n\r\nuniform vec4 uAmbientColor; // ambient color, alpha channel used for intensity.\r\n\r\nuniform vec2 uLightPosition;// light position, normalized to viewport.\r\nuniform vec4 uLightColor;   // light color, alpha channel used for intensity.\r\nuniform vec3 uLightFalloff; // light falloff attenuation coefficients.\r\n\n\r\nvoid main(void){\r\n//vec4 diffuseColor = texture2D(uSampler, vTextureCoord);\r\n//vec4 normalColor = texture2D(uNormalSampler, vTextureCoord);\r\n\r\nvec2 texCoord = gl_FragCoord.xy / uViewSize;\r\n\r\nvec4 diffuseColor = texture2D(uSampler, texCoord);\r\nvec4 normalColor = texture2D(uNormalSampler, texCoord);\r\n\r\n// if no normal color here, just discard\r\nif (normalColor.a == 0.0) discard;\r\n\n\r\n    gl_FragColor = vec4(mix(diffuseColor.rgb, normalColor.rgb, 0.5), diffuseColor.a);\r\n}\r\n"},{}],5:[function(e,r,t){function i(e,r,t,i){n.call(this,e),this.shaderName="pointLightShader"}var n=e("../Light");i.prototype=Object.create(n.prototype),i.prototype.constructor=i,r.exports=i},{"../Light":3}],6:[function(e,r,t){function i(e){n.call(this,e,null,'#define GLSLIFY 1\n\nprecision lowp float;\r\n\r\n// imports the common uniforms like samplers, and ambient color\r\nvarying vec2 vTextureCoord;\r\n\nuniform sampler2D uSampler;\r\nuniform sampler2D uNormalSampler;\r\n\r\nuniform mat3 translationMatrix;\r\n\r\nuniform float alpha;\r\n\r\nuniform vec2 uViewSize;\r\n\r\nuniform vec4 uAmbientColor; // ambient color, alpha channel used for intensity.\r\n\r\nuniform vec2 uLightPosition;// light position, normalized to viewport.\r\nuniform vec4 uLightColor;   // light color, alpha channel used for intensity.\r\nuniform vec3 uLightFalloff; // light falloff attenuation coefficients.\r\n\n\r\nuniform float uLightHeight;\r\n\r\nvoid main()\r\n{\r\n// sets diffuseColor and normalColor from their respective textures\r\n//vec4 diffuseColor = texture2D(uSampler, vTextureCoord);\r\n//vec4 normalColor = texture2D(uNormalSampler, vTextureCoord);\r\n\r\nvec2 texCoord = gl_FragCoord.xy / uViewSize;\r\n\r\nvec4 diffuseColor = texture2D(uSampler, texCoord);\r\nvec4 normalColor = texture2D(uNormalSampler, texCoord);\r\n\r\n// if no normal color here, just discard\r\nif (normalColor.a == 0.0) discard;\r\n\n\r\n    vec2 lightPosition = translationMatrix[2].xy;\r\n\r\n    // the directional vector of the light\r\n    vec3 lightVector = vec3((lightPosition / uViewSize) - (gl_FragCoord.xy / uViewSize), uLightHeight);\r\n\r\n    // correct for aspect ratio\r\n//    lightVector.x *= uViewSize.x / uViewSize.y;\r\n\r\n// does lambertian illumination calculations and sets "finalColor"\r\n// compute Distance\r\nfloat D = length(lightVector);\r\n\r\n// normalize vectors\r\nvec3 N = normalize(normalColor.xyz * 2.0 - 1.0);\r\nvec3 L = normalize(lightVector);\r\n\r\n// pre-multiply light color with intensity\r\n// then perform "N dot L" to determine our diffuse\r\nvec3 diffuse = (uLightColor.rgb * uLightColor.a) * max(dot(N, L), 0.0);\r\n\r\n// pre-multiply ambient color with intensity\r\nvec3 ambient = uAmbientColor.rgb * uAmbientColor.a;\r\n\r\n// calculate attenuation\r\nfloat attenuation = 1.0 / (uLightFalloff.x + (uLightFalloff.y * D) + (uLightFalloff.z * D * D));\r\n\r\n// calculate final intesity and color, then combine\r\nvec3 intensity = ambient + diffuse * attenuation;\r\nvec3 finalColor = diffuseColor.rgb * intensity;\r\n\n\r\n    gl_FragColor = vec4(finalColor, diffuseColor.a);\r\n}',{uLightHeight:{type:"1f",value:.075}})}var n=e("../LightShader");i.prototype=Object.create(n.prototype),i.prototype.constructor=i,r.exports=i,PIXI.ShaderManager.registerPlugin("pointLightShader",i)},{"../LightShader":4}],7:[function(e,r,t){function i(e){PIXI.ObjectRenderer.call(this,e);var r=6*i.MAX_LIGHTS;this.indices=new Uint16Array(r);for(var t=0,n=0;r>t;t+=6,n+=4)this.indices[t+0]=n+0,this.indices[t+1]=n+1,this.indices[t+2]=n+2,this.indices[t+3]=n+0,this.indices[t+4]=n+2,this.indices[t+5]=n+3;this.currentBatchSize=0,this.lights=[]}i.MAX_LIGHTS=500,i.prototype=Object.create(PIXI.ObjectRenderer.prototype),i.prototype.constructor=i,r.exports=i,PIXI.WebGLRenderer.registerPlugin("lights",i),i.prototype.render=function(e){this.lights[this.currentBatchSize++]=e},i.prototype.flush=function(){for(var e=this.renderer,r=e.gl,t=e.diffuseTexture,i=e.normalsTexture,n=null,o=0;o<this.currentBatchSize;++o){var a=this.lights[o],l=a.shader||this.renderer.shaderManager.plugins[a.shaderName];a._vertexBuffer||this._initWebGL(a),l!==n&&(n=l,e.shaderManager.setShader(l)),e.blendModeManager.setBlendMode(a.blendMode),a.worldTransform.toArray(!0,l.uniforms.translationMatrix.value),e.currentRenderTarget.projectionMatrix.toArray(!0,l.uniforms.projectionMatrix.value),l.uniforms.alpha.value=a.worldAlpha,l.uniforms.uViewSize.value[0]=e.width,l.uniforms.uViewSize.value[1]=e.height,l.uniforms.uAmbientColor.value[0]=e._lightAmbientColorRgba[0],l.uniforms.uAmbientColor.value[1]=e._lightAmbientColorRgba[1],l.uniforms.uAmbientColor.value[2]=e._lightAmbientColorRgba[2],l.uniforms.uAmbientColor.value[3]=e._lightAmbientColorRgba[3],l.uniforms.uLightColor.value[0]=a._colorRgba[0],l.uniforms.uLightColor.value[1]=a._colorRgba[1],l.uniforms.uLightColor.value[2]=a._colorRgba[2],l.uniforms.uLightColor.value[3]=a._colorRgba[3],l.uniforms.uLightFalloff.value[0]=a.falloff[0],l.uniforms.uLightFalloff.value[1]=a.falloff[1],l.uniforms.uLightFalloff.value[2]=a.falloff[2],l.syncUniforms(),r.uniform1i(l.uniforms.uSampler._location,0),r.uniform1i(l.uniforms.uNormalSampler._location,1),a.needsUpdate?(a.needsUpdate=!1,r.bindBuffer(r.ARRAY_BUFFER,a._vertexBuffer),r.bufferData(r.ARRAY_BUFFER,a.vertices,r.STATIC_DRAW),r.vertexAttribPointer(l.attributes.aVertexPosition,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,a._uvBuffer),r.bufferData(r.ARRAY_BUFFER,a.uvs,r.STATIC_DRAW),r.vertexAttribPointer(l.attributes.aTextureCoord,2,r.FLOAT,!1,0,0),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,t.baseTexture._glTextures[r.id]),r.activeTexture(r.TEXTURE1),r.bindTexture(r.TEXTURE_2D,i.baseTexture._glTextures[r.id]),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,a._indexBuffer),r.bufferData(r.ELEMENT_ARRAY_BUFFER,a.indices,r.STATIC_DRAW)):(r.bindBuffer(r.ARRAY_BUFFER,a._vertexBuffer),r.bufferSubData(r.ARRAY_BUFFER,0,a.vertices),r.vertexAttribPointer(l.attributes.aVertexPosition,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,a._uvBuffer),r.vertexAttribPointer(l.attributes.aTextureCoord,2,r.FLOAT,!1,0,0),r.activeTexture(r.TEXTURE0),r.bindTexture(r.TEXTURE_2D,t.baseTexture._glTextures[r.id]),r.activeTexture(r.TEXTURE1),r.bindTexture(r.TEXTURE_2D,i.baseTexture._glTextures[r.id]),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,a._indexBuffer),r.bufferSubData(r.ELEMENT_ARRAY_BUFFER,0,a.indices)),r.drawElements(r.TRIANGLES,a.indices.length,r.UNSIGNED_SHORT,0)}this.currentBatchSize=0},i.prototype._initWebGL=function(e){var r=this.renderer.gl;e._vertexBuffer=r.createBuffer(),e._indexBuffer=r.createBuffer(),e._uvBuffer=r.createBuffer(),r.bindBuffer(r.ARRAY_BUFFER,e._vertexBuffer),r.bufferData(r.ARRAY_BUFFER,e.vertices,r.DYNAMIC_DRAW),r.bindBuffer(r.ARRAY_BUFFER,e._uvBuffer),r.bufferData(r.ARRAY_BUFFER,e.uvs,r.STATIC_DRAW),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,e._indexBuffer),r.bufferData(r.ELEMENT_ARRAY_BUFFER,e.indices,r.STATIC_DRAW)},i.prototype.destroy=function(){}},{}],8:[function(e,r,t){function i(e,r,t){t=t||{},this._lightAmbientColor=0,this._lightAmbientColorRgba=[0,0,0,0],this.ambientColor=t.ambientColor||this._lightAmbientColor,this.ambientIntensity=t.ambientIntensity||this._lightAmbientColorRgba[3],this.renderingNormals=!1,this._doWebGLRender=PIXI.WebGLRenderer.prototype.render,PIXI.WebGLRenderer.call(this,e,r,t)}i.prototype=Object.create(PIXI.WebGLRenderer.prototype),i.prototype.constructor=i,r.exports=i,Object.defineProperties(i.prototype,{ambientColor:{get:function(){return this._lightAmbientColor},set:function(e){this._lightAmbientColor=e,PIXI.utils.hex2rgb(e,this._lightAmbientColorRgba)}},ambientIntensity:{get:function(){return this._lightAmbientColorRgba[3]},set:function(e){this._lightAmbientColorRgba[3]=e}}}),Object.assign(i.prototype,{_initContext:function(){PIXI.WebGLRenderer.prototype._initContext.call(this),this.diffuseTexture=new PIXI.RenderTexture(this,this.width,this.height,null,this.resolution),this.normalsTexture=new PIXI.RenderTexture(this,this.width,this.height,null,this.resolution)},render:function(e){this.renderingNormals=!1,this.diffuseTexture.render(e),this.renderingNormals=!0,this.normalsTexture.render(e),this.setRenderTarget(this.renderTarget),this.setObjectRenderer(this.plugins.lights),this.plugins.lights.flush()}})},{}]},{},[1]);